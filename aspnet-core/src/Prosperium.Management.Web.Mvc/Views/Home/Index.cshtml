@using Abp.Runtime.Security
@using Prosperium.Management.Web.Startup
@{
    ViewBag.Title = L("HomePage");
    ViewBag.CurrentPageName = PageNames.Home;

    var isHostUser = AbpSession.TenantId == null;
}

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f4f4;
    }

    .form-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        max-width: 95%;
        width: 100%;
        margin: 10px auto 0;
    }

    h2 {
        font-size: 24px;
        color: #FF8C00;
        padding-top: 30px;
        display: flex;
        font-weight: bold;
    }

    .title {
        margin-bottom: 50px;
        text-align: left;
        border-bottom: 2px solid rgba(204, 204, 204, 0.5);
        padding: 10px 0 30px;
    }

    .card-filter {
        background: #f2f4f8;
        border: 1px solid #ddd;
        padding: 10px;
        text-align: center;
        border-radius: 10px;
        height: 100px;
        display: flex;
        justify-content: center;
    }


    /* cards */
    .card {
        background: #f2f4f8;
        border: 1px solid #ddd;
        padding: 10px;
        margin: 10px;
        text-align: start;
        margin-bottom: 20px;
        transition: transform 0.3s ease-in-out;
        border-radius: 10px;
        height: 100px;
        display: flex;
        align-items: center;
        cursor: pointer;
        justify-content: space-around;
    }

    .icon {
        font-size: 36px;
        margin-right: 10px;
    }

    .card-content {
        display: flex;
        align-items: center;
        width: 100%;
        justify-content: center;
        gap: 20px;
    }

    .text-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    #gastosValue, #ganhosValue, #totalValue {
        font-size: 18px;
        margin: 0;
        font-weight: bold;
    }

    #totalGastos .icon {
        color: #e74c3c;
    }

    #totalGanhos .icon {
        color: #2ecc71;
    }

    h3 {
        font-size: 12px;
        margin: 0;
        color: #555;
        font-weight: bold;
    }

    .opcao-btn {
        display: inline-flex;
        align-items: center;
        padding: 10px;
        margin: 5px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
        display: flex;
        justify-content: center;
        background: #eee;
        font-size: 16px;
    }

        .opcao-btn:hover {
            background-color: #F0E68C;
        }

    .opcao-selecionada {
        background-color: #FF8C00;
        color: white;
        font-weight: bold
    }

</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="form-container" id="ExtractCreate">
    <h2>Boas vindas</h2>
    <p class="title">Centralize suas contas bancárias, acompanhe suas transações e tenha o controle total sobre seus ganhos e gastos. </p>

    @* Filtros *@
    <div class="row">
    </div>

    @if (!isHostUser)
    {

        @* Cards *@
        <div class="row" style="display: flex; justify-content: center;">
            <h2 style="font-size: 18px; padding: 15px;">Resumo</h2>
        </div>
        <div class="row mb-5" style="display: flex; justify-content: space-evenly;  margin: 10px 0 0 0;">
            <div class="col-4">
                <div class="card" id="totalGastos">
                    <div class="card-content">
                        <img src="~/img/transactionTypes/gastos.png" width="40" />
                        <div>
                            <p id="gastosValue">Carregando...</p>
                            <h3>Gastos do mês</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="card" id="totalGanhos">
                    <div class="card-content">
                        <img src="~/img/transactionTypes/ganhos.png" width="40" />
                        <div>
                            <p id="ganhosValue">Carregando...</p>
                            <h3>Ganhos do mês</h3>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4">
                <div class="card" id="total">
                    <div class="card-content">
                        <img src="~/img/transactionTypes/total.png" width="40" />
                        <div>
                            <p id="totalValue">Carregando...</p>
                            <h3>Total do mês</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* Gráfico *@


        <div class="row row-cols-2">
            <div class="col">
                <div class="row" style="display: flex; justify-content: center;">
                    <h2 style="font-size: 18px; padding: 15px;">Transações por categoria</h2>
                </div>
                <div class="row" style="display: flex; justify-content: center;">
                    <canvas id="myPieChart" width="400" height="400"></canvas>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="opcao-btn opcao-selecionada" onclick="marcarOpcao(this, 'gastos')">
                            <input type="radio" name="TransactionType" value="1" style="display: none;" checked />
                            <div class="opcao">Gastos</div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="opcao-btn" onclick="marcarOpcao(this, 'ganhos')">
                            <input type="radio" name="TransactionType" value="2" style="display: none;" />
                            <div class="opcao">Ganhos</div>
                        </div>
                    </div>

                </div>



            </div>
            <div class="col">
                <div class="row" style="display: flex; justify-content: center;">
                    <h2 style="font-size: 18px; padding: 15px;">Últimas transações</h2>
                    <div class="row" style="display: flex; justify-content: flex-end; width: 100%; margin-top: 20px;">
                        <div id="latestTransactionsContainer" style="width: 100%; margin-left: 50px;"></div>
                    </div>
                </div>
            </div>
        </div>
    }

    <input type="hidden" id="isHostUser" value="@isHostUser" />
</div>


<script>

    $(document).ready(function () {
        var isHostUser = $('#isHostUser').val();

        if(!isHostUser){
            UpdateCardValues();
            UpdateCardTransactionsByCategory();
            UpdateCardLatestTransaction();
        }
    });
    

    function marcarOpcao(elemento, valor) {
        var botoes = document.querySelectorAll('.opcao-btn');
        botoes.forEach(function (botao) {
            botao.classList.remove('opcao-selecionada');
        });

        elemento.classList.add('opcao-selecionada');

        var inputRadio = elemento.querySelector('input[type="radio"]');
        inputRadio.checked = true;

        UpdateCardTransactionsByCategory();
    }



    function UpdateCardValues() {
        // Obtém a data atual
        var currentDate = new Date();
        var currentMonthYear = (currentDate.getMonth() + 1).toString().padStart(2, '0') + '/' + currentDate.getFullYear();

        monthYearValue = currentMonthYear;

        $.ajax({
            url: 'GetValuesTotals',
            type: 'GET',
            data: { monthYear: monthYearValue },
            dataType: 'json',
            success: function (data) {
                var gastos = (data.result.gastos !== undefined) ? "R$ " + Math.abs(data.result.gastos).toFixed(2).replace('.', ',') : "R$ 0,00";
                var ganhos = (data.result.ganhos !== undefined) ? "R$ " + Math.abs(data.result.ganhos).toFixed(2).replace('.', ',') : "R$ 0,00";

                var total = parseFloat(data.result.ganhos) - (parseFloat(data.result.gastos) * -1);
                var totalString = "R$ " + Math.abs(total).toFixed(2).replace('.', ',');

                $('#gastosValue').text(gastos);
                $('#ganhosValue').text(ganhos);
                $('#totalValue').text(totalString);


                // Adicionando lógica para definir a borda e o ícone do card
                var totalCard = $('#total');

                if (total > 0) {
                    totalCard.css('border-color', '#28a745');
                    totalCard.css('box-shadow', '0 0 10px rgba(40, 167, 69, 0.5)');
                } else if (total < 0) {
                    totalCard.css('border-color', '#dc3545');
                    totalCard.css('box-shadow', '0 0 10px rgba(220, 53, 69, 0.5)');
                } else {
                    totalCard.css('border-color', '#ccc');
                    totalCard.css('box-shadow', '0 0 10px rgba(0, 0, 0, 0.1)');
                }
            },
            error: function (error) {
                console.error('Erro na requisição:', error);
            }
        });
    }

    function UpdateCardTransactionsByCategory() {
        var currentDate = new Date();
        var currentMonthYear = (currentDate.getMonth() + 1).toString().padStart(2, '0') + '/' + currentDate.getFullYear();

        var selectedPaymentType = parseInt($('input[name="TransactionType"]:checked').val());


        monthYearValue = currentMonthYear;

        $.ajax({
            url: 'GetTransactionsByCategory',
            type: 'GET',
            data: { monthYear: monthYearValue, transactionType: selectedPaymentType },
            dataType: 'json',
            success: function (data) {
                renderPieChart(data.result);
            },
            error: function (error) {
                console.error('Erro na requisição:', error);
            }
        });
    }

    function UpdateCardLatestTransaction() {
        var currentDate = new Date();
        var monthYearValue = (currentDate.getMonth() + 1).toString().padStart(2, '0') + '/' + currentDate.getFullYear();

        $.ajax({
            url: 'LatestTransactions',
            type: 'GET',
            data: { monthYear: monthYearValue },
            dataType: 'json',
            success: function (data) {
                if (data.result && data.result.length > 0) {
                    var container = document.getElementById('latestTransactionsContainer');

                    container.innerHTML = '';

                    data.result.forEach(function (transaction) {
                        container.innerHTML += createTransactionCard(transaction);
                    });
                }
            },
            error: function (error) {
                console.error('Erro na requisição:', error);
            }
        });
    }

    function formatDate(dateString) {
        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
        return new Date(dateString).toLocaleDateString('pt-BR', options);
    }

    // Função para criar o HTML do card
    function createTransactionCard(transaction) {
        var imageFullPath = abp.appPath + 'img/categories/' + transaction.imageCategory;

        return `
                    <div class="card" style="height: 90px;">
                        <div class="card-content">
                            <div class="card-body d-flex align-items-center" style="width: 100%;">
                                     <div class="row" style="width: 100%; display: flex; align-items: center;">
                                        <div class="col-2" style="display: flex; justify-content: center;">
                                        <img src="${imageFullPath}" width="40" />
                                    </div>
                                    <div class="col-7" style="display: flex; align-items: center; gap: 15px;">
                                        <p style="font-size: 16px; color: #000; font-weight: bold; margin-left: 10px;">${transaction.category}</p>
                                        <p style="font-size: 13px; color: #999; margin: 0;">${transaction.expenseValue >= 0 ? 'R$ ' + transaction.expenseValue.toFixed(2) : '-R$ ' + Math.abs(transaction.expenseValue).toFixed(2)}</p>
                                    </div>
                                    <div class="col-3">
                                                <p  style="font-size: 16px; color: #000; font-weight: bold; margin-left: 10px;">${formatDate(transaction.transactionDate)}</p>
                                    </div>
                                </div>
                                <div>

                                </div>
                            </div>
                        </div>
                    </div>
                        `;
    }


    var myPieChart;

    // Gráfico de categória
    function renderPieChart(data) {
        var canvas = document.getElementById('myPieChart');

        if (!canvas) {
            console.error('Elemento canvas não encontrado.');
            return;
        }

        if (myPieChart) {
            myPieChart.destroy();
        }

        var labels = data.map(item => item.categoria);
        var values = data.map(item => Math.abs(item.valorTotal));

        var ctx = canvas.getContext('2d');

        // Cores relacionadas ao laranja
        var orangeColors = ['#FFA07A', '#FF7F50', '#FF6347', '#FF4500', '#FF8C00'];

        myPieChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: values,
                    backgroundColor: orangeColors,
                }]
            },
            options: {
                responsive: false,
                maintainAspectRatio: false,
                cutout: '80%',
                plugins: {
                    legend: {
                        display: true,
                        position: 'left',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                var label = context.label || '';
                                var value = Math.abs(context.parsed).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                return label + ': ' + value;
                            },
                        },
                    },
                },
            },
        });
    }



    function getRandomColors(count) {
        // Função para gerar cores aleatórias
        var colors = [];
        for (var i = 0; i < count; i++) {
            var color = '#' + Math.floor(Math.random() * 16777215).toString(16);
            colors.push(color);
        }
        return colors;
    }
</script>