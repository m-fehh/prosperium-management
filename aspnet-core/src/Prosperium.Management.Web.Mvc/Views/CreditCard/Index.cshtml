@using Prosperium.Management.Web.Startup;

@{
    ViewData["Title"] = "Meus cartões";
    ViewBag.CurrentPageName = PageNames.CreditCards;
}

@section scripts
    {
    <environment names="Development">
        <script src="~/view-resources/Views/CreditCard/CreateCard.js" asp-append-version="true"></script>
    </environment>

    <environment names="Staging,Production">
        <script src="~/view-resources/Views/CreditCard/CreateCard.js" asp-append-version="true"></script>
    </environment>
}

<link rel="stylesheet" href="~/css/CreditCard/style.css" />


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<div class="form-container" id="AccountCreate">
    <h2>@ViewData["Title"]</h2>
    <p class="title">Visualize seus cartões de crédito de forma organizada, mantendo o controle total dos seus gastos. Uma visão clara para uma saúde financeira sólida.</p>

    <div class="row" style="display: flex; justify-content: flex-end;">
        <div class="col-6">

            <div class="opcao-btn opcao-selecionada" onclick="marcarOpcao(this, 'ativos')">
                <input type="radio" value="1" style="display: none;" checked />
                <div class="opcao">Cartões ativas</div>
            </div>

            <div class="opcao-btn" onclick="marcarOpcao(this, 'desativados')">
                <input type="radio" value="2" style="display: none;" />
                <div class="opcao">Cartões inativas</div>
            </div>

        </div>
        <div class="col-6" style="display: flex; justify-content: space-around;">
            <a href="@Url.Action("CreateCard", "CreditCard")" class="custom-button" id="bnt-adicionar-conta">
                <i class="fa fa-plus"></i> &nbsp; Adicionar cartão manualmente
            </a>
        </div>
    </div>

    <div id="card-container" style="/* display: flex; justify-content: space-around; */ padding: 40px 10px;"></div>
</div>

<script>
    $(document).ready(function () {
        UpdateCardValues(true);
    });

    function marcarOpcao(elemento, valor) {
        var botoes = document.querySelectorAll('.opcao-btn');
        botoes.forEach(function (botao) {
            botao.classList.remove('opcao-selecionada');
        });

        elemento.classList.add('opcao-selecionada');

        var inputRadio = elemento.querySelector('input[type="radio"]');
        inputRadio.checked = true;

        // var textActive = (isActive) ? "Ativa" : "Inativa";
        var isActive = (valor == "ativos") ? true : false;

        UpdateCardValues(isActive);
    }

    var isSaldoVisible = false;

    function toggleVisibility(balance, saldoId, iconId) {
        isSaldoVisible = !isSaldoVisible;
        updateSaldoVisibility(balance, saldoId);

        // Altera o ícone do olho com base no estado de visibilidade
        var eyeIcon = document.getElementById(iconId);

        if (eyeIcon) {
            if (!isSaldoVisible) {
                eyeIcon.className = 'fas fa-eye';
            } else {
                eyeIcon.className = 'fas fa-eye-slash';
            }
        } else {
            console.error("Icon not found:", iconId);
        }
    }

    function updateSaldoVisibility(balance, saldoId) {
        var saldoElement = $('#' + saldoId);
        if (isSaldoVisible) {
            saldoElement.text(balance);
        } else {
            saldoElement.text("R$ ••••");
        }
    }

    function UpdateCardValues(isActive) {
        var cardContainer = $('#card-container');
        $.ajax({
            url: '/App/CreditCard/GetCards',
            type: 'GET',
            dataType: 'json',
            data: { isActive: isActive },
            success: function (data) {
                $('#card-container').empty();

                var textActive = (!isActive) ? "Ativar" : "Desativar";
                var cardHtml = '<div class="row">';

                if (data.result.length > 0) {
                    data.result.forEach(function (card, index) {
                        var typeAccount = (card.origin == 2) ? "Integração automática" : card.cardNumber;

                        cardHtml += `
                            <div class="col-6">
                                <div class="card">
                                    <div class="card-content" style="cursor:pointer;">
                                        <div class="text-content">
                                               <div class="row" style="display: flex; justify-content:flex-start; align-items: center; justify-content: flex-start; width: 100%; padding: 0 10px;">
                                                   <div class="col-11" style="margin-left: -15px;display: flex;padding-left: 30px;float: left; align-items: center;">
                                                    <h3 style="font-size: 19px; font-weight: bold;">${card.cardName}</h3>
                                                        <p class="saldo-label" style="padding-left: 15px; font-size: 12px; color: #999;">${typeAccount}</p>
                                                </div>
                                                <div class="col-1">
                                                    <div class="icon" style="display: flex; gap: 10px;">
                                                        <img src="/img/flags/${card.flagCard.iconPath}" width="50"  style="border-radius: 10px;" />
                                                    </div>
                                                </div>
                                            </div>
                                            <hr class="divider">
                                            <div class="row" style="width:100%;">
                                                <div class="col-1 d-flex">
                                                        <button class="btn-toggle-visibility" onclick="toggleVisibility('${formatCurrency(card.limit)}', 'saldo_${card.id}', 'eyeIcon_${card.id}')" style="border: none; background: none;margin-top: 10px;">
                                                            <i id="eyeIcon_${card.id}" class="fas fa-eye" style="color: #333; font-size: 18px;"></i>
                                                    </button>
                                                </div>
                                                <div class="col-10">
                                                    <p class="saldo-label" style="display: flex; padding: 0 5px;">Limite:</p>
                                                    <p class="saldo-valor" id="saldo_${card.id}" style="display: flex; padding: 0 5px;">${isSaldoVisible ? formatCurrency(card.limit) : 'R$ ••••'}</p>
                                                </div>
                                                   <div class="col-1 d-flex align-items-center">
                                                   <div class="dropdown" style="margin-top: 10px;">
                                                        <div id="menuIcon" class="ml-auto dropdown-toggle" data-toggle="dropdown" style="display: flex; align-items: center;">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                                                                <path d="M2 11h12a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2zm0-5h12a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2zm0-5h12a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2z" />
                                                            </svg>
                                                        </div>
                                                        <div class="dropdown-menu dropdown-menu-right">
                                                                <button class="dropdown-item" data-cartao-id="${card.id}" data-status-cartao="${isActive}" id="bntChangeStatus">${textActive}</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>`;


                        // Se o índice é ímpar ou é o último card, fecha a linha
                        if (index % 2 !== 0 || index === data.length - 1) {
                            cardHtml += '</div>'; // Fecha a linha
                            // Se não for o último card, inicia uma nova linha
                            if (index !== data.length - 1) {
                                cardHtml += '<div class="row">';
                            }
                        }
                    });

                    cardContainer.append(cardHtml);
                }

                else {
                    var textActive = (isActive) ? "ativo" : "inativo";
                    var emptyCardHtml = `
                                <div class="row justify-content-center align-items-center" style="padding-bottom: 30px;">
                                <div class="col-md-10">
                                    <div class="card text-center" style="height: 100%; padding: 30px 0;">
                                        <h3 style="font-size: 18px; font-weight: bold;">Você não possui um cartão ${textActive} associado ao seu perfil.</h3>`;

                    emptyCardHtml += `</div> </div > </div>`;
                    cardContainer.append(emptyCardHtml);
                }
            },
            error: function (error) {
                console.error('Erro na requisição:', error);
            }
        });
    }


    function formatCurrency(value) {
        const formattedValue = value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return value >= 0 ? `R$ ${formattedValue}` : `- R$ ${formattedValue.substring(1)}`;
    }
</script>
